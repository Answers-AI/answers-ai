// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
 output   = "../generated/prisma-client"
 referentialIntegrity = "prisma"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  role          String    @default("user")
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  organization Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?

  appSettings Json?
  chats Chat[]
  messages Message[]
  
  prompts Prompt[]
  
  journeys Journey[]

  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt @default(now())
}

model Organization {
  id            String    @id @default(cuid())
  name          String?
  image         String?
  users         User[]  

  appSettings Json?

  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt @default(now())
}

model WebDocument {
  id            String    @id @default(cuid())
  url String @unique
  domain String
  content String?
  pageTitle String?
  pageLastUpdatedAt        DateTime?           @updatedAt

  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt @default(now())
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  refresh_token_expires_in Int?
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Chat {
  id   String @id @default(uuid())
  title String?
  prompt Prompt? @relation(fields: promptId, references: id)
  promptId String?

  journey Journey? @relation(fields: journeyId, references: id)
  journeyId String?

  users User[] 
  messages Message[]
  
  filters Json

  deleted Boolean @default(false)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt @default(now())
}


model Journey { 
  id   String @id @default(uuid())
  title String?

  filters Json

  chats Chat[]

  users User[] 
  deleted Boolean @default(false)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt @default(now())
}

model Prompt {
  id   String @id @default(uuid())
  title String?
  description String?

  content String @unique
  
  chat Chat[] 
  
  usages Int @default(0)
  likes Int @default(0)
  dislikes Int @default(0)

  deleted Boolean @default(false)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt @default(now())

  answers Message[]

  users User[]
}


model Message {
  id   String @id @default(uuid())
  role String @default("assistant")
  content String

  prompt Prompt? @relation(fields: promptId, references: id)
  promptId String?

  user User? @relation(fields: userId, references: id) 
  userId String?

  chat Chat @relation(fields: chatId, references: id)
  chatId String
  
  likes Int @default(0)
  dislikes Int @default(0)

  deleted Boolean @default(false)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt @default(now())
}


model AppSettings {
  id   String @id @default(uuid())

  services       AppService[]
  jiraSettings   JiraSettings @relation(fields: [jiraSettingsId], references: [id])
  // User           User[]
  jiraSettingsId String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt @default(now())
}

model AppService {
  id   String @id @default(uuid())

  name          String
  enabled       Boolean
  AppSettings   AppSettings? @relation(fields: [appSettingsId], references: [id])
  appSettingsId String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt @default(now())
}

model JiraSettings {
  id   String @id @default(uuid())

  projects    JiraProjectSetting[]
  AppSettings AppSettings[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt @default(now())
}

model JiraProjectSetting {
  id   String @id @default(uuid())

  key            String
  enabled        Boolean
  JiraSettings   JiraSettings? @relation(fields: [jiraSettingsId], references: [id])
  jiraSettingsId String?
  
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt @default(now())
}
