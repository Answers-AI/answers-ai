// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider             = "prisma-client-js"
  output               = "../generated/prisma-client"
  referentialIntegrity = "prisma"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model ChatApp {
  id             Int           @id @default(autoincrement())
  apiKey         String        @unique
  name           String?
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id])
  userId         String
  user           User          @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(cuid())
  role          String    @default("user")
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  invited       DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  currentOrganization Organization? @relation("UserOrganzationsSelected", fields: [organizationId], references: [id])

  organizations Organization[] @relation("UserOrganzations")

  appSettings Json?
  chats       Chat[]
  messages    Message[]

  prompts Prompt[]

  journeys Journey[]

  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @default(now()) @updatedAt
  ChatApp        ChatApp[]
  organizationId String?
  apiKey         ApiKey?

  favoritedSidekicks Sidekick[] @relation("SidekickFavoritedBy")
  Sidekick           Sidekick[]
}

model ApiKey {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
  key    String @unique
}

model Organization {
  id                  String               @id @default(cuid())
  name                String?
  image               String?
  users               User[]               @relation("UserOrganzations")
  usersSelected       User[]               @relation("UserOrganzationsSelected")
  documentPermissions DocumentPermission[]
  appSettings         Json?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @default(now()) @updatedAt
  ChatApp             ChatApp[]
}

model Sidekick {
  id                   String   @id @default(cuid())
  isGlobal             Boolean? @default(false)
  departments          String[]
  label                String
  placeholder          String?
  temperature          Float    @default(1)
  frequency            Float    @default(0)
  presence             Float    @default(0)
  maxCompletionTokens  Int      @default(500)
  aiModel              String
  systemPromptTemplate String?
  userPromptTemplate   String?
  contextStringRender  String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @default(now()) @updatedAt
  createdByUser        User     @relation(fields: [userId], references: [id])
  userId               String
  favoritedBy          User[]   @relation("SidekickFavoritedBy")
}

model WebDocument {
  id                String    @id @default(cuid())
  url               String    @unique
  domain            String
  content           String?
  pageTitle         String?
  pageLastUpdatedAt DateTime? @updatedAt
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @default(now()) @updatedAt
}

model Document {
  id     String  @id @default(cuid())
  source String
  title  String?
  domain String?
  url    String  @unique

  content  String @default("")
  metadata Json   @default("{}")

  permissions DocumentPermission[]

  status       String    @default("pending")
  lastSyncedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model DocumentPermission {
  id String @id @default(cuid())

  document   Document @relation(fields: [documentId], references: [id])
  documentId String

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Account {
  id                       String   @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?  @db.Text
  refresh_token_expires_in Int?
  access_token             String?  @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?  @db.Text
  session_state            String?
  state                    String?
  ok                       Boolean?
  user                     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Chat {
  id       String  @id @default(uuid())
  title    String?
  prompt   Prompt? @relation(fields: promptId, references: id)
  promptId String?

  journey   Journey? @relation(fields: journeyId, references: id)
  journeyId String?

  users    User[]
  messages Message[]

  filters Json

  deleted   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Journey {
  id    String  @id @default(uuid())
  title String?
  goal  String?

  filters Json

  chats Chat[]

  users     User[]
  deleted   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Prompt {
  id          String  @id @default(uuid())
  title       String?
  description String?

  content String @unique

  chat Chat[]

  usages   Int @default(0)
  likes    Int @default(0)
  dislikes Int @default(0)

  deleted   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  answers Message[]

  users User[]

  tags String[]
}

model Message {
  id                     String   @id @default(uuid())
  role                   String   @default("assistant")
  content                String
  contextSourceFilesUsed String[]

  prompt   Prompt? @relation(fields: promptId, references: id)
  promptId String?

  user   User?   @relation(fields: userId, references: id)
  userId String?

  chat   Chat   @relation(fields: chatId, references: id)
  chatId String

  likes    Int @default(0)
  dislikes Int @default(0)

  deleted   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model AppSettings {
  id String @id @default(uuid())

  services       AppService[]
  jiraSettings   JiraSettings @relation(fields: [jiraSettingsId], references: [id])
  // User           User[]
  jiraSettingsId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt
}

model AppService {
  id String @id @default(uuid())

  name          String
  enabled       Boolean
  AppSettings   AppSettings? @relation(fields: [appSettingsId], references: [id])
  appSettingsId String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @default(now()) @updatedAt
}

model JiraSettings {
  id String @id @default(uuid())

  projects    JiraProjectSetting[]
  AppSettings AppSettings[]
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @default(now()) @updatedAt
}

model JiraProjectSetting {
  id String @id @default(uuid())

  key            String
  enabled        Boolean
  JiraSettings   JiraSettings? @relation(fields: [jiraSettingsId], references: [id])
  jiraSettingsId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}
